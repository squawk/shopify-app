{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nmutation($input: ProductInput!) {\\n    productUpdate(input: $input) {\\n      product {\\n        metafields(first: 100) {\\n          edges {\\n            node {\\n              id\\n              namespace\\n              key\\n              value\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { Banner, Card, ChoiceList, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Toast, Heading } from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Mutation, useQuery } from 'react-apollo';\nimport { Loading } from '@shopify/app-bridge/actions';\nimport { array } from 'prop-types';\nimport { nonExecutableDefinitionMessage } from 'graphql/validation/rules/ExecutableDefinitions'; // import { SELECT_ALL_ITEMS } from '@shopify/polaris/types/utilities/resource-list';\n\nvar UPDATE_METAFIELD = gql(_templateObject());\nexport default function EditProduct() {\n  var _useState = useState([]),\n      metafield = _useState[0],\n      setMetafield = _useState[1];\n\n  var _useState2 = useState([]),\n      item = _useState2[0],\n      setItem = _useState2[1];\n\n  var _useState3 = useState(['none']),\n      selected = _useState3[0],\n      setSelected = _useState3[1];\n\n  var handleChoiceListChange = useCallback(function (value) {\n    return setSelected(value);\n  }, []);\n  useEffect(function () {\n    var item = store.get('item');\n    setItem(item);\n    var metafields = [];\n    console.log('item in use effect', item.metafields.edges.length);\n\n    for (var i = 0; i < item.metafields.edges.length; i++) {\n      var field = item.metafields.edges[i].node.key;\n      metafields[field] = item.metafields.edges[i].node.value;\n      metafields[field + 'id'] = item.metafields.edges[i].node.id;\n    }\n\n    setMetafield(metafields);\n    console.log('METAFIELDS', metafields);\n  }, []);\n\n  var handleChange = function handleChange(name) {\n    return function (event) {\n      setMetafield(_objectSpread({}, metafield, _defineProperty({}, name, event)));\n    };\n  };\n\n  return __jsx(Mutation, {\n    mutation: UPDATE_METAFIELD\n  }, function (handleSubmit, _ref) {\n    var error = _ref.error,\n        data = _ref.data;\n    console.log('DATA', data);\n\n    var showError = error && __jsx(Banner, {\n      status: \"critical\"\n    }, error.message);\n\n    var showToast = data && data.productUpdate && __jsx(Toast, {\n      content: \"Sucessfully updated\" // onDismiss={() => this.setState({ showToast: false })}\n\n    });\n\n    return __jsx(Frame, null, __jsx(Page, null, __jsx(Layout, null, showToast, __jsx(Layout.Section, null, __jsx(DisplayText, {\n      size: \"extraLarge\"\n    }, \"Section 1 for \", item.title || ''), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"The Header of your product pages is the most important section as it\\u2019s the first thing a visitor sees. You have less than 3 seconds to get their attention to read more. You have to make it count!\"), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"Every product solves a problem. You need to identify what problem the product solves. Then you need to identify what someone is feeling who has this problem. (Sad, annoyed, frustrated, jealous)\"), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"Then you need the visitor to realize you solve that problem they have.\"), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"This is done in the headline. Asking if someone has that problem with a question is one of the best ways to hit the pain point someone has who needs your product.\"), showError), __jsx(Layout.Section, null, __jsx(Form, null, __jsx(Card, {\n      sectioned: true\n    }, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n      prefix: \"\",\n      value: metafield.headline || '',\n      onChange: handleChange('headline'),\n      label: \"What is a question you could ask someone?\",\n      type: \"text\",\n      helpText: \"Examples: Have dandruff? Feeling tired or sluggish? Sick Of Zits? Got Back Pain?\"\n    })), __jsx(FormLayout.Group, null, __jsx(TextField, {\n      prefix: \"\",\n      value: metafield.outcome || '',\n      onChange: handleChange('outcome'),\n      label: \"In one sentence describe the outcome of using your product.\",\n      type: \"price\",\n      helpText: \"Examples:  \\u201CLook and feel your best in less than 24 hours!\\u201D \\u201CGrow the beard of your dreams.\\u201D \\u201CSay goodbye to pain without needing surgery.\\u201D\"\n    })), __jsx(FormLayout.Group, null, __jsx(TextField, {\n      prefix: \"\",\n      value: metafield.videolink || '',\n      onChange: handleChange('videolink'),\n      label: \"Do you have a YouTube video selling the product?\",\n      type: \"price\",\n      helpText: \"If not, leave blank.\"\n    })))), __jsx(PageActions, {\n      primaryAction: [{\n        content: 'Next',\n        onAction: function onAction() {\n          var productMetafield = {\n            \"id\": item.id,\n            \"metafields\": [{\n              \"id\": metafield.headlineid,\n              'namespace': 'vizi',\n              \"key\": \"headline\",\n              \"value\": metafield.headline,\n              \"valueType\": \"STRING\"\n            }, {\n              \"id\": metafield.outcomeid,\n              'namespace': 'vizi',\n              \"key\": \"outcome\",\n              \"value\": metafield.outcome,\n              \"valueType\": \"STRING\"\n            }, {\n              \"id\": metafield.videolinkid,\n              'namespace': 'vizi',\n              \"key\": \"videolink\",\n              \"value\": metafield.videolink,\n              \"valueType\": \"STRING\"\n            }, {\n              \"id\": metafield.feature1,\n              'namespace': 'vizi',\n              \"key\": \"feature1\",\n              \"value\": metafield.feature1,\n              \"valueType\": \"STRING\"\n            }, {\n              \"id\": metafield.benefit1,\n              'namespace': 'vizi',\n              \"key\": \"benefit1\",\n              \"value\": metafield.benefit1,\n              \"valueType\": \"STRING\"\n            }]\n          };\n          console.log('PRODUCT META', productMetafield);\n          {\n            handleSubmit({\n              variables: {\n                input: productMetafield\n              }\n            });\n          }\n          ;\n        }\n      }]\n    }))), __jsx(Layout.Section, null, __jsx(DisplayText, {\n      size: \"extraLarge\"\n    }, \"Section Two: As seen on TV (optional)\"), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"Has your product ever been featured by another business or influencer? This is a great way to create social proof about your brand. It builds a trust that you have a quality product because others have talked about you. If you don\\u2019t then you should reach out to blogs, influencers, or podcasts to promote your product. Then you can use their logo in the \\u201CAs Seen On\\u201D section. Upload 3-5 Logos on businesses, influencers, podcasts, or blogs who\\u2019ve talked about your product.\"), showError), __jsx(Layout.Section, null, __jsx(Form, null, __jsx(Card, {\n      sectioned: true\n    }, __jsx(FormLayout, null, __jsx(FormLayout.Group, null))))), __jsx(Layout.Section, null, __jsx(DisplayText, {\n      size: \"extraLarge\"\n    }, \"Section Three: Benefits of the product\"), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"People want to know the outcome of using your product. They want to know what\\u2019s in it for them! Although features are important, it's the benefits that sell the product. Benefits are the outcome of a product feature.  \"), showError), __jsx(Layout.Section, null, __jsx(Form, null, __jsx(Card, {\n      sectioned: true\n    }, __jsx(FormLayout, null, \"this needs multiple\", __jsx(FormLayout.Group, null), __jsx(FormLayout.Group, null, __jsx(TextField, {\n      prefix: \"\",\n      value: metafield.feature1 || '',\n      onChange: handleChange('feature1'),\n      label: \"Feature:\",\n      type: \"text\",\n      helpText: \"Examples: High levels of L-Citrulline \"\n    })), __jsx(FormLayout.Group, null, __jsx(TextField, {\n      prefix: \"\",\n      value: metafield.benefit1 || '',\n      onChange: handleChange('benefit1'),\n      label: \"Benefit:\",\n      type: \"text\",\n      helpText: \"Examples: Get the maximum pump at the gym so you can continue to increase your size and tone!\"\n    })))))))));\n  });\n}","map":{"version":3,"sources":["/Users/lucasvanskyhawk/code/shopify-app-v1/pages/edit-products.js"],"names":["React","useCallback","useState","useEffect","Banner","Card","ChoiceList","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Toast","Heading","store","gql","Mutation","useQuery","Loading","array","nonExecutableDefinitionMessage","UPDATE_METAFIELD","EditProduct","metafield","setMetafield","item","setItem","selected","setSelected","handleChoiceListChange","value","get","metafields","console","log","edges","length","i","field","node","key","id","handleChange","name","event","handleSubmit","error","data","showError","message","showToast","productUpdate","title","headline","outcome","videolink","content","onAction","productMetafield","headlineid","outcomeid","videolinkid","feature1","benefit1","variables","input"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect } from 'react';\nimport {\n    Banner,\n    Card,\n    ChoiceList,\n    DisplayText,\n    Form,\n    FormLayout,\n    Frame,\n    Layout,\n    Page,\n    PageActions,\n    TextField,\n    Toast,\n    Heading\n} from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\n\n\nimport { Mutation, useQuery } from 'react-apollo';\nimport { Loading } from '@shopify/app-bridge/actions';\nimport { array } from 'prop-types';\nimport { nonExecutableDefinitionMessage } from 'graphql/validation/rules/ExecutableDefinitions';\n// import { SELECT_ALL_ITEMS } from '@shopify/polaris/types/utilities/resource-list';\n\n\n\n\nconst UPDATE_METAFIELD = gql`\nmutation($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        metafields(first: 100) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n    }\n  }`\n\n\n\nexport default function EditProduct() {\n\n    const [metafield, setMetafield] = useState([])\n    const [item, setItem] = useState([]);\n    const [selected, setSelected] = useState(['none']);\n    const handleChoiceListChange = useCallback((value) => setSelected(value), []);\n\n    useEffect(() => {\n        const item = store.get('item')\n\n        setItem(item);\n\n        let metafields = [];\n        console.log('item in use effect', item.metafields.edges.length)\n        for (let i = 0; i < item.metafields.edges.length; i++) {\n            let field = item.metafields.edges[i].node.key;\n            metafields[field] = item.metafields.edges[i].node.value;\n            metafields[field + 'id'] = item.metafields.edges[i].node.id;\n        }\n        setMetafield(metafields)\n        console.log('METAFIELDS', metafields)\n    }, [])\n\n    const handleChange = name => event => {\n        setMetafield({ ...metafield, [name]: event });\n    }\n\n    return (\n        <Mutation\n            mutation={UPDATE_METAFIELD}\n        >\n            {(handleSubmit, { error, data }) => {\n                console.log('DATA', data)\n                const showError = error && (\n                    <Banner status=\"critical\">{error.message}</Banner>\n                );\n                const showToast = data && data.productUpdate && (\n                    <Toast\n                        content=\"Sucessfully updated\"\n                    // onDismiss={() => this.setState({ showToast: false })}\n                    />\n                );\n\n                return (\n                    <Frame>\n                        <Page>\n                            <Layout>\n\n                                {showToast}\n                                {/* section one */}\n                                <Layout.Section>\n                                    <DisplayText size='extraLarge'>Section 1 for {item.title || ''}</DisplayText>\n                                    <DisplayText size=\"small\">The Header of your product pages is the most important section as it’s the first thing a visitor sees. You have less than 3 seconds to get their attention to read more. You have to make it count!</DisplayText>\n                                    <DisplayText size=\"small\">Every product solves a problem. You need to identify what problem the product solves. Then you need to identify what someone is feeling who has this problem. (Sad, annoyed, frustrated, jealous)</DisplayText>\n                                    <DisplayText size=\"small\">Then you need the visitor to realize you solve that problem they have.</DisplayText>\n                                    <DisplayText size=\"small\">This is done in the headline. Asking if someone has that problem with a question is one of the best ways to hit the pain point someone has who needs your product.</DisplayText>\n                                    {showError}\n                                </Layout.Section>\n                                <Layout.Section>\n\n\n                                    <Form>\n                                        <Card sectioned>\n                                            <FormLayout>\n\n                                                <FormLayout.Group>\n                                                    <TextField\n                                                        prefix=\"\"\n                                                        value={metafield.headline || ''}\n                                                        onChange={handleChange('headline')}\n\n                                                        label=\"What is a question you could ask someone?\"\n                                                        type=\"text\"\n                                                        helpText=\"Examples: Have dandruff? Feeling tired or sluggish? Sick Of Zits? Got Back Pain?\"\n\n                                                    />\n                                                </FormLayout.Group>\n\n                                                <FormLayout.Group>\n                                                    <TextField\n                                                        prefix=\"\"\n                                                        value={metafield.outcome || ''}\n                                                        onChange={handleChange('outcome')}\n                                                        label=\"In one sentence describe the outcome of using your product.\"\n                                                        type=\"price\"\n                                                        helpText=\"Examples:  “Look and feel your best in less than 24 hours!” “Grow the beard of your dreams.” “Say goodbye to pain without needing surgery.”\"\n\n                                                    />\n                                                </FormLayout.Group>\n\n                                                <FormLayout.Group>\n                                                    <TextField\n                                                        prefix=\"\"\n                                                        value={metafield.videolink || ''}\n                                                        onChange={handleChange('videolink')}\n\n                                                        label=\"Do you have a YouTube video selling the product?\"\n                                                        type=\"price\"\n                                                        helpText=\"If not, leave blank.\"\n                                                    />\n                                                </FormLayout.Group>\n\n                                            </FormLayout>\n\n                                        </Card>\n\n                                        <PageActions\n                                            primaryAction={[\n                                                {\n                                                    content: 'Next',\n                                                    onAction: () => {\n                                                        const productMetafield = {\n\n                                                            \"id\": item.id,\n                                                            \"metafields\": [\n                                                                {\n                                                                    \"id\": metafield.headlineid,\n                                                                    'namespace': 'vizi',\n                                                                    \"key\": \"headline\",\n                                                                    \"value\": metafield.headline,\n                                                                    \"valueType\": \"STRING\"\n                                                                },\n                                                                {\n                                                                    \"id\": metafield.outcomeid,\n                                                                    'namespace': 'vizi',\n                                                                    \"key\": \"outcome\",\n                                                                    \"value\": metafield.outcome,\n                                                                    \"valueType\": \"STRING\"\n                                                                },\n                                                                {\n                                                                    \"id\": metafield.videolinkid,\n                                                                    'namespace': 'vizi',\n                                                                    \"key\": \"videolink\",\n                                                                    \"value\": metafield.videolink,\n                                                                    \"valueType\": \"STRING\"\n                                                                },\n\n\n                                                                {\n                                                                    \"id\": metafield.feature1,\n                                                                    'namespace': 'vizi',\n                                                                    \"key\": \"feature1\",\n                                                                    \"value\": metafield.feature1,\n                                                                    \"valueType\": \"STRING\"\n                                                                },\n                                                                {\n                                                                    \"id\": metafield.benefit1,\n                                                                    'namespace': 'vizi',\n                                                                    \"key\": \"benefit1\",\n                                                                    \"value\": metafield.benefit1,\n                                                                    \"valueType\": \"STRING\"\n                                                                },\n\n                                                            ]\n\n                                                        };\n                                                        console.log('PRODUCT META', productMetafield)\n                                                        {\n                                                            handleSubmit({\n                                                                variables: { input: productMetafield },\n                                                            })\n                                                        };\n                                                    }\n                                                }\n                                            ]}\n                                        />\n                                    </Form>\n                                </Layout.Section>\n\n                                {/* section two */}\n                                <Layout.Section>\n                                    <DisplayText size='extraLarge'>Section Two: As seen on TV (optional)</DisplayText>\n                                    <DisplayText size=\"small\">Has your product ever been featured by another business or influencer? This is a great way to create social proof about your brand. It builds a trust that you have a quality product because others have talked about you. If you don’t then you should reach out to blogs, influencers, or podcasts to promote your product. Then you can use their logo in the “As Seen On” section.\n                                        Upload 3-5 Logos on businesses, influencers, podcasts, or blogs who’ve talked about your product.\n                                    </DisplayText>\n                                    {showError}\n                                </Layout.Section>\n\n                                <Layout.Section>\n                                    <Form>\n                                        <Card sectioned>\n                                            <FormLayout>\n\n                                                <FormLayout.Group>\n                                                    {/* <TextField\n                                                        prefix=\"\"\n                                                        value={''}\n                                                        onChange={handleChange('logo')}\n\n                                                        label=\"What is a question you could ask someone?\"\n                                                        type=\"text\"\n                                                        helpText=\"Examples: Have dandruff? Feeling tired or sluggish? Sick Of Zits? Got Back Pain?\"\n\n                                                    /> */}\n                                                </FormLayout.Group>\n\n                                            </FormLayout>\n\n                                        </Card>\n                                    </Form>\n                                </Layout.Section>\n\n                                {/* section three */}\n                                <Layout.Section>\n                                    <DisplayText size='extraLarge'>Section Three: Benefits of the product</DisplayText>\n                                    <DisplayText size=\"small\">People want to know the outcome of using your product. They want to know what’s in it for them! Although features are important, it's the benefits that sell the product. Benefits are the outcome of a product feature.  </DisplayText>\n                                    {showError}\n                                </Layout.Section>\n                                <Layout.Section>\n                                    <Form>\n                                        <Card sectioned>\n                                            <FormLayout>\n                                                this needs multiple\n                                            <FormLayout.Group>\n                                                    {/* <TextField\n                                                        prefix=\"\"\n                                                        value={''}\n                                                        onChange={handleChange('f')}\n\n                                                        label=\"What is a question you could ask someone?\"\n                                                        type=\"text\"\n                                                        helpText=\"Examples: Have dandruff? Feeling tired or sluggish? Sick Of Zits? Got Back Pain?\"\n                                                    /> */}\n                                                </FormLayout.Group>\n                                                <FormLayout.Group>\n                                                    <TextField\n                                                        prefix=\"\"\n                                                        value={metafield.feature1 || ''}\n                                                        onChange={handleChange('feature1')}\n\n                                                        label=\"Feature:\"\n                                                        type=\"text\"\n                                                        helpText=\"Examples: High levels of L-Citrulline \"\n                                                    />\n                                                </FormLayout.Group>\n                                                <FormLayout.Group>\n                                                    <TextField\n                                                        prefix=\"\"\n                                                        value={metafield.benefit1 || ''}\n                                                        onChange={handleChange('benefit1')}\n\n                                                        label=\"Benefit:\"\n                                                        type=\"text\"\n                                                        helpText=\"Examples: Get the maximum pump at the gym so you can continue to increase your size and tone!\"\n                                                    />\n                                                </FormLayout.Group>\n\n                                            </FormLayout>\n\n                                        </Card>\n                                    </Form>\n                                </Layout.Section>\n                                {/* section 4 */}\n\n                            </Layout>\n                        </Page>\n                    </Frame>\n                );\n            }}\n        </Mutation>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}