{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation productVariantUpdate($input: ProductVariantInput!) {\\n    productVariantUpdate(input: $input) {\\n      product {\\n        title\\n        description\\n      }\\n      productVariant {\\n        id\\n        price\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Banner, Card, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Toast } from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nvar UPDATE_PRICE = gql(_templateObject());\n\nvar EditProduct =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditProduct, _React$Component);\n\n  function EditProduct() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditProduct);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditProduct)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      discount: '',\n      description: '',\n      price: '',\n      variantId: '',\n      showToast: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (field) {\n      return function (value) {\n        return _this.setState(_defineProperty({}, field, value));\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"itemToBeConsumed\", function () {\n      var item = store.get('item');\n      var price = item.variants.edges[0].node.price;\n      var variantId = item.variants.edges[0].node.id;\n      var discounter = price * 0.1;\n\n      _this.setState({\n        price: price,\n        variantId: variantId\n      });\n\n      return (price - discounter).toFixed(2);\n    });\n\n    return _this;\n  }\n\n  _createClass(EditProduct, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        discount: this.itemToBeConsumed()\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          name = _this$state.name,\n          description = _this$state.description,\n          price = _this$state.price,\n          discount = _this$state.discount,\n          variantId = _this$state.variantId;\n      return __jsx(Mutation, {\n        mutation: UPDATE_PRICE\n      }, function (handleSubmit, _ref) {\n        var error = _ref.error,\n            data = _ref.data;\n\n        var showError = error && __jsx(Banner, {\n          status: \"critical\"\n        }, error.message);\n\n        var showToast = data && data.productVariantUpdate && __jsx(Toast, {\n          content: \"Sucessfully updated\",\n          onDismiss: function onDismiss() {\n            return _this2.setState({\n              showToast: false\n            });\n          }\n        });\n\n        return __jsx(Frame, null, __jsx(Page, null, __jsx(Layout, null, showToast, __jsx(Layout.Section, null, __jsx(\"p\", null, \"The Header of your product pages is the most important section as it\\u2019s the first thing a visitor sees. You have less than 3 seconds to get their attention to read more. You have to make it count!\"), __jsx(\"p\", null, \"Every product solves a problem. You need to identify what problem the product solves. Then you need to identify what someone is feeling who has this problem. (Sad, annoyed, frustrated, jealous)\"), __jsx(\"p\", null, \"Then you need the visitor to realize you solve that problem they have.\"), __jsx(\"p\", null, \"This is done in the headline. Asking if someone has that problem with a question is one of the best ways to hit the pain point someone has who needs your product.\"), showError), __jsx(Layout.Section, null, __jsx(DisplayText, {\n          size: \"large\"\n        }, name), __jsx(Form, null, __jsx(Card, {\n          sectioned: true\n        }, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n          prefix: \"\",\n          value: description,\n          label: \"What is a question you could ask someone?\",\n          type: \"price\",\n          helpText: \"Examples: Have dandruff? Feeling tired or sluggish? Sick Of Zits? Got Back Pain?\"\n        })))), __jsx(PageActions, {\n          primaryAction: [{\n            content: 'Save',\n            onAction: function onAction() {\n              var productVariableInput = {\n                id: variantId,\n                price: discount\n              };\n              handleSubmit({\n                variables: {\n                  input: productVariableInput\n                }\n              });\n            }\n          }] // secondaryActions={[\n          //     {\n          //         content: 'Remove discount'\n          //     }\n          // ]}\n\n        }))))));\n      });\n    }\n  }]);\n\n  return EditProduct;\n}(React.Component);\n\nexport default EditProduct;","map":{"version":3,"sources":["/Users/lucasvanskyhawk/code/shopify-app-v1/pages/edit-products.js"],"names":["Banner","Card","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Toast","store","gql","Mutation","UPDATE_PRICE","EditProduct","discount","description","price","variantId","showToast","field","value","setState","item","get","variants","edges","node","id","discounter","toFixed","itemToBeConsumed","state","name","handleSubmit","error","data","showError","message","productVariantUpdate","content","onAction","productVariableInput","variables","input","React","Component"],"mappings":"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","sourcesContent":["import {\n    Banner,\n    Card,\n    DisplayText,\n    Form,\n    FormLayout,\n    Frame,\n    Layout,\n    Page,\n    PageActions,\n    TextField,\n    Toast,\n} from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\n\nconst UPDATE_PRICE = gql`\n  mutation productVariantUpdate($input: ProductVariantInput!) {\n    productVariantUpdate(input: $input) {\n      product {\n        title\n        description\n      }\n      productVariant {\n        id\n        price\n      }\n    }\n  }\n`;\n\nclass EditProduct extends React.Component {\n    state = {\n        discount: '',\n        description: '',\n        price: '',\n        variantId: '',\n        showToast: false,\n    };\n\n    componentDidMount() {\n        this.setState({ discount: this.itemToBeConsumed() });\n    }\n\n    render() {\n        const { name, description, price, discount, variantId } = this.state;\n        return (\n            <Mutation\n                mutation={UPDATE_PRICE}\n            >\n                {(handleSubmit, { error, data }) => {\n                    const showError = error && (\n                        <Banner status=\"critical\">{error.message}</Banner>\n                    );\n                    const showToast = data && data.productVariantUpdate && (\n                        <Toast\n                            content=\"Sucessfully updated\"\n                            onDismiss={() => this.setState({ showToast: false })}\n                        />\n                    );\n\n                    return (\n                        <Frame>\n                            <Page>\n                                <Layout>\n\n                                    {showToast}\n                                    <Layout.Section>\n                                        <p>The Header of your product pages is the most important section as it’s the first thing a visitor sees. You have less than 3 seconds to get their attention to read more. You have to make it count!</p>\n                                        <p>Every product solves a problem. You need to identify what problem the product solves. Then you need to identify what someone is feeling who has this problem. (Sad, annoyed, frustrated, jealous)</p>\n                                        <p>Then you need the visitor to realize you solve that problem they have.</p>\n                                        <p>This is done in the headline. Asking if someone has that problem with a question is one of the best ways to hit the pain point someone has who needs your product.</p>\n                                        {showError}\n                                    </Layout.Section>\n                                    <Layout.Section>\n\n                                        <DisplayText size=\"large\">{name}</DisplayText>\n                                        <Form>\n                                            <Card sectioned>\n                                                <FormLayout>\n                                                    {/* <h3> What is a question you could ask someone?</h3> */}\n                                                    <FormLayout.Group>\n                                                        <TextField\n                                                            prefix=\"\"\n                                                            value={description}\n\n                                                            label=\"What is a question you could ask someone?\"\n                                                            type=\"price\"\n                                                            helpText=\"Examples: Have dandruff? Feeling tired or sluggish? Sick Of Zits? Got Back Pain?\"\n\n                                                        />\n                                                        {/* <TextField\n                                                            prefix=\"\"\n                                                            value={discount}\n                                                            onChange={this.handleChange('discount')}\n                                                            label=\"Discounted price\"\n                                                            type=\"discount\"\n                                                        /> */}\n                                                    </FormLayout.Group>\n\n                                                </FormLayout>\n                                            </Card>\n                                            <PageActions\n                                                primaryAction={[\n                                                    {\n                                                        content: 'Save',\n                                                        onAction: () => {\n                                                            const productVariableInput = {\n                                                                id: variantId,\n                                                                price: discount,\n                                                            };\n                                                            handleSubmit({\n                                                                variables: { input: productVariableInput },\n                                                            });\n                                                        }\n                                                    }\n                                                ]}\n                                            // secondaryActions={[\n                                            //     {\n                                            //         content: 'Remove discount'\n                                            //     }\n                                            // ]}\n                                            />\n                                        </Form>\n                                    </Layout.Section>\n                                </Layout>\n                            </Page>\n                        </Frame>\n                    );\n                }}\n            </Mutation>\n        );\n    }\n\n    handleChange = (field) => {\n        return (value) => this.setState({ [field]: value });\n    };\n\n    itemToBeConsumed = () => {\n        const item = store.get('item');\n        const price = item.variants.edges[0].node.price;\n        const variantId = item.variants.edges[0].node.id;\n        const discounter = price * 0.1;\n        this.setState({ price, variantId });\n        return (price - discounter).toFixed(2);\n    };\n}\n\nexport default EditProduct;"]},"metadata":{},"sourceType":"module"}