{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { Banner, Card, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Toast, Heading } from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Mutation, useQuery } from 'react-apollo';\nimport { Loading } from '@shopify/app-bridge/actions';\nimport { array } from 'prop-types';\nconst UPDATE_METAFIELD = gql`\nmutation($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        metafields(first: 100) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n    }\n  }`;\nexport default function EditProduct() {\n  const {\n    0: metafield,\n    1: setMetafield\n  } = useState([]);\n  const item = new _Promise(e => {\n    return store.get('item');\n  }).then(e => console.log('done')); // const item = store.get('item');\n  // const { loading, error, data } = useQuery(GET_METAFIELD, {\n  //     variables: { productid: `gid://shopify/Product/${item.id}` }\n  // })\n\n  console.log(item != undefined && item.metafields);\n  const reworkMetafields = item != undefined && item.metafields.edges.reduce((r, e) => {\n    let key = e.node.key; // setMetafield({ ...metafield, [key]: e.node.value })\n\n    r[key] = e.node;\n    return r;\n  }, {});\n  _Array$isArray(reworkMetafields) && reworkMetafields.map(e => console.log('element', e));\n\n  const handleChange = name => event => {\n    setMetafield(_objectSpread({}, metafield, {\n      [name]: event\n    }));\n    console.log(metafield);\n    return event;\n  };\n\n  console.log('rework', reworkMetafields);\n  return __jsx(Mutation, {\n    mutation: UPDATE_METAFIELD\n  }, (handleSubmit, {\n    error,\n    data\n  }) => {\n    console.log('DATA', data);\n\n    const showError = error && __jsx(Banner, {\n      status: \"critical\"\n    }, error.message);\n\n    const showToast = data && data.productUpdate && __jsx(Toast, {\n      content: \"Sucessfully updated\" // onDismiss={() => this.setState({ showToast: false })}\n\n    });\n\n    return __jsx(Frame, null, __jsx(Page, null, __jsx(Layout, null, showToast, __jsx(Layout.Section, null, __jsx(DisplayText, {\n      size: \"extraLarge\"\n    }, \"Section 1 for \", item != undefined && item.title), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"The Header of your product pages is the most important section as it\\u2019s the first thing a visitor sees. You have less than 3 seconds to get their attention to read more. You have to make it count!\"), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"Every product solves a problem. You need to identify what problem the product solves. Then you need to identify what someone is feeling who has this problem. (Sad, annoyed, frustrated, jealous)\"), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"Then you need the visitor to realize you solve that problem they have.\"), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"This is done in the headline. Asking if someone has that problem with a question is one of the best ways to hit the pain point someone has who needs your product.\"), showError), __jsx(Layout.Section, null, __jsx(Form, null, __jsx(Card, {\n      sectioned: true\n    }, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n      prefix: \"\",\n      value: reworkMetafields.headline == undefined ? '' : setMetafield('headline', reworkMetafields.headline.value) || '',\n      onChange: handleChange('headline'),\n      label: \"What is a question you could ask someone?\",\n      type: \"text\",\n      helpText: \"Examples: Have dandruff? Feeling tired or sluggish? Sick Of Zits? Got Back Pain?\"\n    })), __jsx(FormLayout.Group, null, __jsx(TextField, {\n      prefix: \"\",\n      value: metafield.outcome || '',\n      onChange: handleChange('outcome'),\n      label: \"In one sentence describe the outcome of using your product.\",\n      type: \"price\",\n      helpText: \"Examples:  \\u201CLook and feel your best in less than 24 hours!\\u201D \\u201CGrow the beard of your dreams.\\u201D \\u201CSay goodbye to pain without needing surgery.\\u201D\"\n    })), __jsx(FormLayout.Group, null, __jsx(TextField, {\n      prefix: \"\",\n      value: metafield.videoLink || '',\n      onChange: handleChange('videoLink'),\n      label: \"Do you have a YouTube video selling the product?\",\n      type: \"price\",\n      helpText: \"If not, leave blank.\"\n    })))), __jsx(PageActions, {\n      primaryAction: [{\n        content: 'Next',\n        onAction: () => {\n          console.log('METAFIELDS', item.metafields);\n          console.log(item.metafields.edges[0]);\n          const productMetafield = {\n            \"id\": item.id,\n            \"metafields\": [{\n              'namespace': 'vizi',\n              \"key\": \"headline\",\n              \"value\": metafield.headline,\n              \"valueType\": \"STRING\"\n            }, {\n              'namespace': 'vizi',\n              \"key\": \"outcome\",\n              \"value\": metafield.outcome,\n              \"valueType\": \"STRING\"\n            }, {\n              'namespace': 'vizi',\n              \"key\": \"videolink\",\n              \"value\": metafield.videoLink,\n              \"valueType\": \"STRING\"\n            }]\n          };\n          {\n            handleSubmit({\n              variables: {\n                input: productMetafield\n              }\n            });\n          }\n          ;\n        }\n      }]\n    }))))));\n  }); // handleChange = (field) => {\n  //     return (value) => this.setState({ [field]: value });\n  // };\n  // itemToBeConsumed = () => {\n  //     const item = store.get('item');\n  //     const price = item.variants.edges[0].node.price;\n  //     const variantId = item.variants.edges[0].node.id;\n  //     const discounter = price * 0.1;\n  //     this.setState({ price, variantId });\n  //     return (price - discounter).toFixed(2);\n  // };\n}","map":{"version":3,"sources":["/Users/lucasvanskyhawk/code/shopify-app-v1/pages/edit-products.js"],"names":["React","useState","Banner","Card","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Toast","Heading","store","gql","Mutation","useQuery","Loading","array","UPDATE_METAFIELD","EditProduct","metafield","setMetafield","item","e","get","then","console","log","undefined","metafields","reworkMetafields","edges","reduce","r","key","node","map","handleChange","name","event","handleSubmit","error","data","showError","message","showToast","productUpdate","title","headline","value","outcome","videoLink","content","onAction","productMetafield","id","variables","input"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n    Banner,\n    Card,\n    DisplayText,\n    Form,\n    FormLayout,\n    Frame,\n    Layout,\n    Page,\n    PageActions,\n    TextField,\n    Toast,\n    Heading\n} from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\n\n\nimport { Mutation, useQuery } from 'react-apollo';\nimport { Loading } from '@shopify/app-bridge/actions';\nimport { array } from 'prop-types';\n\n\n\n\nconst UPDATE_METAFIELD = gql`\nmutation($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        metafields(first: 100) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n    }\n  }`\n\n\n\nexport default function EditProduct() {\n\n    const [metafield, setMetafield] = useState([])\n\n    const item = (new Promise(e => { return store.get('item'); })).then(e => console.log('done'));\n    // const item = store.get('item');\n\n    // const { loading, error, data } = useQuery(GET_METAFIELD, {\n    //     variables: { productid: `gid://shopify/Product/${item.id}` }\n    // })\n\n    console.log(item != undefined && item.metafields)\n    const reworkMetafields = item != undefined && item.metafields.edges.reduce((r, e) => {\n        let key = e.node.key;\n        // setMetafield({ ...metafield, [key]: e.node.value })\n        r[key] = e.node\n        return r;\n    }, {});\n\n    Array.isArray(reworkMetafields) && reworkMetafields.map(e => console.log('element', e));\n\n    const handleChange = name => event => {\n\n        setMetafield({ ...metafield, [name]: event });\n        console.log(metafield);\n        return event;\n    }\n\n    console.log('rework', reworkMetafields)\n\n    return (\n        <Mutation\n            mutation={UPDATE_METAFIELD}\n        >\n            {(handleSubmit, { error, data }) => {\n                console.log('DATA', data)\n                const showError = error && (\n                    <Banner status=\"critical\">{error.message}</Banner>\n                );\n                const showToast = data && data.productUpdate && (\n                    <Toast\n                        content=\"Sucessfully updated\"\n                    // onDismiss={() => this.setState({ showToast: false })}\n                    />\n                );\n\n                return (\n                    <Frame>\n                        <Page>\n                            <Layout>\n\n                                {showToast}\n\n                                <Layout.Section>\n                                    <DisplayText size='extraLarge'>Section 1 for {item != undefined && item.title}</DisplayText>\n                                    <DisplayText size=\"small\">The Header of your product pages is the most important section as it’s the first thing a visitor sees. You have less than 3 seconds to get their attention to read more. You have to make it count!</DisplayText>\n                                    <DisplayText size=\"small\">Every product solves a problem. You need to identify what problem the product solves. Then you need to identify what someone is feeling who has this problem. (Sad, annoyed, frustrated, jealous)</DisplayText>\n                                    <DisplayText size=\"small\">Then you need the visitor to realize you solve that problem they have.</DisplayText>\n                                    <DisplayText size=\"small\">This is done in the headline. Asking if someone has that problem with a question is one of the best ways to hit the pain point someone has who needs your product.</DisplayText>\n                                    {showError}\n                                </Layout.Section>\n                                <Layout.Section>\n\n\n                                    <Form>\n                                        <Card sectioned>\n                                            <FormLayout>\n\n                                                <FormLayout.Group>\n                                                    <TextField\n                                                        prefix=\"\"\n                                                        value={reworkMetafields.headline == undefined ? '' : (setMetafield('headline', reworkMetafields.headline.value) || '')}\n                                                        onChange={handleChange('headline')}\n\n                                                        label=\"What is a question you could ask someone?\"\n                                                        type=\"text\"\n                                                        helpText=\"Examples: Have dandruff? Feeling tired or sluggish? Sick Of Zits? Got Back Pain?\"\n\n                                                    />\n                                                </FormLayout.Group>\n                                                <FormLayout.Group>\n                                                    <TextField\n                                                        prefix=\"\"\n                                                        value={metafield.outcome || ''}\n                                                        onChange={handleChange('outcome')}\n                                                        label=\"In one sentence describe the outcome of using your product.\"\n                                                        type=\"price\"\n                                                        helpText=\"Examples:  “Look and feel your best in less than 24 hours!” “Grow the beard of your dreams.” “Say goodbye to pain without needing surgery.”\"\n\n                                                    />\n                                                </FormLayout.Group>\n\n                                                <FormLayout.Group>\n                                                    <TextField\n                                                        prefix=\"\"\n                                                        value={metafield.videoLink || ''}\n                                                        onChange={handleChange('videoLink')}\n\n                                                        label=\"Do you have a YouTube video selling the product?\"\n                                                        type=\"price\"\n                                                        helpText=\"If not, leave blank.\"\n                                                    />\n                                                </FormLayout.Group>\n\n                                            </FormLayout>\n                                        </Card>\n                                        <PageActions\n                                            primaryAction={[\n                                                {\n                                                    content: 'Next',\n                                                    onAction: () => {\n                                                        console.log('METAFIELDS', item.metafields)\n                                                        console.log(item.metafields.edges[0])\n                                                        const productMetafield = {\n\n                                                            \"id\": item.id,\n                                                            \"metafields\": [\n                                                                {\n                                                                    'namespace': 'vizi',\n                                                                    \"key\": \"headline\",\n                                                                    \"value\": metafield.headline,\n                                                                    \"valueType\": \"STRING\"\n                                                                },\n                                                                {\n                                                                    'namespace': 'vizi',\n                                                                    \"key\": \"outcome\",\n                                                                    \"value\": metafield.outcome,\n                                                                    \"valueType\": \"STRING\"\n                                                                },\n                                                                {\n                                                                    'namespace': 'vizi',\n                                                                    \"key\": \"videolink\",\n                                                                    \"value\": metafield.videoLink,\n                                                                    \"valueType\": \"STRING\"\n                                                                }\n                                                            ]\n\n                                                        };\n                                                        {\n                                                            handleSubmit({\n                                                                variables: { input: productMetafield },\n                                                            })\n                                                        };\n                                                    }\n                                                }\n                                            ]}\n                                        />\n                                    </Form>\n                                </Layout.Section>\n                            </Layout>\n                        </Page>\n                    </Frame>\n                );\n            }}\n        </Mutation>\n    );\n\n\n    // handleChange = (field) => {\n    //     return (value) => this.setState({ [field]: value });\n    // };\n\n    // itemToBeConsumed = () => {\n    //     const item = store.get('item');\n    //     const price = item.variants.edges[0].node.price;\n    //     const variantId = item.variants.edges[0].node.id;\n    //     const discounter = price * 0.1;\n    //     this.setState({ price, variantId });\n    //     return (price - discounter).toFixed(2);\n    // };\n}\n\n"]},"metadata":{},"sourceType":"module"}