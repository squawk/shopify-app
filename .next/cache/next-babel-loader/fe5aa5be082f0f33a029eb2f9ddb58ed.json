{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation productUpdate($input: ProductInput!) {\\n    producUpdate(input: $input) {\\n      product {\\n       id\\n      }\\n      userErrors{\\n          field\\n          message\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { Banner, Card, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Toast, Heading } from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Context } from '@shopify/app-bridge-react';\nimport { Mutation } from 'react-apollo';\nimport { useMutation } from '@apollo/react-hooks';\nvar UPDATE_METAFIELD = gql(_templateObject());\nexport default function EditProduct() {\n  var _this = this;\n\n  var _useState = useState([]),\n      metafield = _useState[0],\n      setMetafield = _useState[1];\n\n  var item = store.get('item');\n\n  var handleChange = function handleChange(name) {\n    return function (event) {\n      setMetafield(_objectSpread({}, metafield, _defineProperty({}, name, event)));\n      console.log(metafield);\n    };\n  }; // console.log('this is the thing', item);\n\n\n  return __jsx(Mutation, {\n    mutation: UPDATE_METAFIELD\n  }, function (handleSubmit, _ref) {\n    var error = _ref.error,\n        data = _ref.data;\n\n    var showError = error && __jsx(Banner, {\n      status: \"critical\"\n    }, error.message);\n\n    var showToast = data && data.productVariantUpdate && __jsx(Toast, {\n      content: \"Sucessfully updated\",\n      onDismiss: function onDismiss() {\n        return _this.setState({\n          showToast: false\n        });\n      }\n    });\n\n    return __jsx(Frame, null, __jsx(Page, null, __jsx(Layout, null, showToast, __jsx(Layout.Section, null, __jsx(DisplayText, {\n      size: \"extraLarge\"\n    }, \"Section 1 for \", item != undefined && item.title), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"The Header of your product pages is the most important section as it\\u2019s the first thing a visitor sees. You have less than 3 seconds to get their attention to read more. You have to make it count!\"), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"Every product solves a problem. You need to identify what problem the product solves. Then you need to identify what someone is feeling who has this problem. (Sad, annoyed, frustrated, jealous)\"), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"Then you need the visitor to realize you solve that problem they have.\"), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"This is done in the headline. Asking if someone has that problem with a question is one of the best ways to hit the pain point someone has who needs your product.\"), showError), __jsx(Layout.Section, null, __jsx(Form, null, __jsx(Card, {\n      sectioned: true\n    }, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n      prefix: \"\",\n      value: metafield.headline || '',\n      onChange: handleChange('headline'),\n      label: \"What is a question you could ask someone?\",\n      type: \"text\",\n      helpText: \"Examples: Have dandruff? Feeling tired or sluggish? Sick Of Zits? Got Back Pain?\"\n    })), __jsx(FormLayout.Group, null, __jsx(TextField, {\n      prefix: \"\",\n      value: metafield.outcome || '',\n      onChange: handleChange('outcome'),\n      label: \"In one sentence describe the outcome of using your product.\",\n      type: \"price\",\n      helpText: \"Examples:  \\u201CLook and feel your best in less than 24 hours!\\u201D \\u201CGrow the beard of your dreams.\\u201D \\u201CSay goodbye to pain without needing surgery.\\u201D\"\n    })), __jsx(FormLayout.Group, null, __jsx(TextField, {\n      prefix: \"\",\n      value: metafield.videoLink || '',\n      onChange: handleChange('videoLink'),\n      label: \"Do you have a YouTube video selling the product?\",\n      type: \"price\",\n      helpText: \"If not, leave blank.\"\n    })))), __jsx(PageActions, {\n      primaryAction: [{\n        content: 'Next',\n        onAction: function onAction() {\n          var productVariableInput = {\n            id: variantId,\n            metafields: [{\n              key: 'headline',\n              value: metafield.headline,\n              value_type: 'string',\n              namespace: 'vizi'\n            }, {\n              key: 'outcome',\n              value: metafield.outcome\n            }]\n          };\n          handleSubmit({\n            variables: {\n              input: productVariableInput\n            }\n          });\n        }\n      }] // secondaryActions={[\n      //     {\n      //         content: 'Remove discount'\n      //     }\n      // ]}\n\n    }))))));\n  }); // handleChange = (field) => {\n  //     return (value) => this.setState({ [field]: value });\n  // };\n  // itemToBeConsumed = () => {\n  //     const item = store.get('item');\n  //     const price = item.variants.edges[0].node.price;\n  //     const variantId = item.variants.edges[0].node.id;\n  //     const discounter = price * 0.1;\n  //     this.setState({ price, variantId });\n  //     return (price - discounter).toFixed(2);\n  // };\n}","map":{"version":3,"sources":["/Users/lucasvanskyhawk/code/shopify-app-v1/pages/edit-products.js"],"names":["React","useState","Banner","Card","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Toast","Heading","store","gql","Context","Mutation","useMutation","UPDATE_METAFIELD","EditProduct","metafield","setMetafield","item","get","handleChange","name","event","console","log","handleSubmit","error","data","showError","message","showToast","productVariantUpdate","setState","undefined","title","headline","outcome","videoLink","content","onAction","productVariableInput","id","variantId","metafields","key","value","value_type","namespace","variables","input"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n    Banner,\n    Card,\n    DisplayText,\n    Form,\n    FormLayout,\n    Frame,\n    Layout,\n    Page,\n    PageActions,\n    TextField,\n    Toast,\n    Heading\n} from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Context } from '@shopify/app-bridge-react';\n\nimport { Mutation } from 'react-apollo';\nimport { useMutation } from '@apollo/react-hooks';\n\nconst UPDATE_METAFIELD = gql`\n  mutation productUpdate($input: ProductInput!) {\n    producUpdate(input: $input) {\n      product {\n       id\n      }\n      userErrors{\n          field\n          message\n      }\n    }\n  }\n`;\n\nexport default function EditProduct() {\n\n    const [metafield, setMetafield] = useState([])\n\n\n    const item = store.get('item');\n\n    const handleChange = name => event => {\n\n        setMetafield({ ...metafield, [name]: event });\n        console.log(metafield);\n    }\n\n\n    // console.log('this is the thing', item);\n\n    return (\n        <Mutation\n            mutation={UPDATE_METAFIELD}\n        >\n            {(handleSubmit, { error, data }) => {\n                const showError = error && (\n                    <Banner status=\"critical\">{error.message}</Banner>\n                );\n                const showToast = data && data.productVariantUpdate && (\n                    <Toast\n                        content=\"Sucessfully updated\"\n                        onDismiss={() => this.setState({ showToast: false })}\n                    />\n                );\n\n                return (\n                    <Frame>\n                        <Page>\n                            <Layout>\n\n                                {showToast}\n\n                                <Layout.Section>\n                                    <DisplayText size='extraLarge'>Section 1 for {item != undefined && item.title}</DisplayText>\n                                    <DisplayText size=\"small\">The Header of your product pages is the most important section as it’s the first thing a visitor sees. You have less than 3 seconds to get their attention to read more. You have to make it count!</DisplayText>\n                                    <DisplayText size=\"small\">Every product solves a problem. You need to identify what problem the product solves. Then you need to identify what someone is feeling who has this problem. (Sad, annoyed, frustrated, jealous)</DisplayText>\n                                    <DisplayText size=\"small\">Then you need the visitor to realize you solve that problem they have.</DisplayText>\n                                    <DisplayText size=\"small\">This is done in the headline. Asking if someone has that problem with a question is one of the best ways to hit the pain point someone has who needs your product.</DisplayText>\n                                    {showError}\n                                </Layout.Section>\n                                <Layout.Section>\n\n                                    {/* <DisplayText size=\"large\">{name}</DisplayText> */}\n                                    <Form>\n                                        <Card sectioned>\n                                            <FormLayout>\n                                                {/* <h3> What is a question you could ask someone?</h3> */}\n                                                <FormLayout.Group>\n                                                    <TextField\n                                                        prefix=\"\"\n                                                        value={metafield.headline || ''}\n                                                        onChange={handleChange('headline')}\n\n                                                        label=\"What is a question you could ask someone?\"\n                                                        type=\"text\"\n                                                        helpText=\"Examples: Have dandruff? Feeling tired or sluggish? Sick Of Zits? Got Back Pain?\"\n\n                                                    />\n                                                </FormLayout.Group>\n                                                <FormLayout.Group>\n                                                    <TextField\n                                                        prefix=\"\"\n                                                        value={metafield.outcome || ''}\n                                                        onChange={handleChange('outcome')}\n                                                        label=\"In one sentence describe the outcome of using your product.\"\n                                                        type=\"price\"\n                                                        helpText=\"Examples:  “Look and feel your best in less than 24 hours!” “Grow the beard of your dreams.” “Say goodbye to pain without needing surgery.”\"\n\n                                                    />\n\n                                                    {/* <TextField\n                                                            prefix=\"\"\n                                                            value={discount}\n                                                            onChange={this.handleChange('discount')}\n                                                            label=\"Discounted price\"\n                                                            type=\"discount\"\n                                                        /> */}\n                                                </FormLayout.Group>\n                                                <FormLayout.Group>\n                                                    <TextField\n                                                        prefix=\"\"\n                                                        value={metafield.videoLink || ''}\n                                                        onChange={handleChange('videoLink')}\n\n                                                        label=\"Do you have a YouTube video selling the product?\"\n                                                        type=\"price\"\n                                                        helpText=\"If not, leave blank.\"\n\n                                                    />\n\n                                                </FormLayout.Group>\n\n                                            </FormLayout>\n                                        </Card>\n                                        <PageActions\n                                            primaryAction={[\n                                                {\n                                                    content: 'Next',\n                                                    onAction: () => {\n                                                        const productVariableInput = {\n                                                            id: variantId,\n                                                            metafields: [{\n                                                                key: 'headline',\n                                                                value: metafield.headline,\n                                                                value_type: 'string',\n                                                                namespace: 'vizi'\n                                                            },\n                                                            {\n                                                                key: 'outcome',\n                                                                value: metafield.outcome\n                                                            }]\n                                                        };\n                                                        handleSubmit({\n                                                            variables: { input: productVariableInput },\n                                                        });\n                                                    }\n                                                }\n                                            ]}\n                                        // secondaryActions={[\n                                        //     {\n                                        //         content: 'Remove discount'\n                                        //     }\n                                        // ]}\n                                        />\n                                    </Form>\n                                </Layout.Section>\n                            </Layout>\n                        </Page>\n                    </Frame>\n                );\n            }}\n        </Mutation>\n    );\n\n\n    // handleChange = (field) => {\n    //     return (value) => this.setState({ [field]: value });\n    // };\n\n    // itemToBeConsumed = () => {\n    //     const item = store.get('item');\n    //     const price = item.variants.edges[0].node.price;\n    //     const variantId = item.variants.edges[0].node.id;\n    //     const discounter = price * 0.1;\n    //     this.setState({ price, variantId });\n    //     return (price - discounter).toFixed(2);\n    // };\n}\n\n"]},"metadata":{},"sourceType":"module"}