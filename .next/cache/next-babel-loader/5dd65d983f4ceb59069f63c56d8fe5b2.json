{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nmutation($input: ProductInput!) {\\n    productUpdate(input: $input) {\\n      product {\\n        metafields(first: 100) {\\n          edges {\\n            node {\\n              id\\n              namespace\\n              key\\n              value\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { Banner, Card, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Toast, Heading } from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Mutation, useQuery } from 'react-apollo';\nimport { Loading } from '@shopify/app-bridge/actions';\nimport { array } from 'prop-types';\nimport { nonExecutableDefinitionMessage } from 'graphql/validation/rules/ExecutableDefinitions';\nvar UPDATE_METAFIELD = gql(_templateObject());\nexport default function EditProduct() {\n  var _useState = useState([]),\n      metafield = _useState[0],\n      setMetafield = _useState[1];\n\n  var item = store.get('item'); // let mf = [];\n  // if (item != undefined) {\n  //     for (let i = 0; i < item.metafields.edges.length; i++) {\n  //         mf[item.metafields.edges[i].node.key] = item.metafields.edges[i].node.value;\n  //         console.log('MF', mf);\n  //     }\n  //     setMetafield(mf);\n  // }\n  // console.log('MF->', mf);\n  // console.log('ITEM->', item);\n  // store.each(function (value, key) {\n  //     if (key == 'item') {\n  //         // setMetafield({ ...metafield, key })\n  //         const tmpvalue = value.metafields.edges.reduce((r, e) => {\n  //             r[e.node.key] = e.node.value\n  //             return r;\n  //         });\n  //         console.log('tmp', tmpvalue);\n  //         // setMetafield(metafield, tmp);\n  //     }\n  //     // console.log(key, '==', value)\n  // })\n  // const { loading, error, data } = useQuery(GET_METAFIELD, {\n  //     variables: { productid: `gid://shopify/Product/${item.id}` }\n  // })\n  // console.log(item != undefined && item.metafields)\n  // const reworkMetafields = item != undefined && item.metafields.edges.reduce((r, e) => {\n  //     let key = e.node.key;\n  //     // setMetafield({ ...metafield, [key]: e.node.value })\n  //     r[key] = e.node\n  //     return r;\n  // }, {});\n  // Array.isArray(reworkMetafields) && reworkMetafields.map(e => console.log('element', e));\n\n  var handleChange = function handleChange(name) {\n    return function (event) {\n      // setMetafield({ ...metafield, [name]: event });\n      console.log(name, event);\n\n      for (var i = 0; i < item.metafields.edges.length; i++) {\n        if (item.metafields.edges[i].node.key == name) {\n          item.metafields.edges[i].node.value = event;\n        }\n      }\n\n      console.log('item', item);\n    };\n  };\n\n  var getValue = function getValue(name) {\n    if (item != undefined) {\n      return item.metafields.edges.find(function (e) {\n        return e.node.key == name;\n      }).node.value;\n    }\n\n    return '';\n  }; // console.log('rework', reworkMetafields)\n\n\n  return __jsx(Mutation, {\n    mutation: UPDATE_METAFIELD\n  }, function (handleSubmit, _ref) {\n    var error = _ref.error,\n        data = _ref.data;\n    console.log('DATA', data);\n\n    var showError = error && __jsx(Banner, {\n      status: \"critical\"\n    }, error.message);\n\n    var showToast = data && data.productUpdate && __jsx(Toast, {\n      content: \"Sucessfully updated\" // onDismiss={() => this.setState({ showToast: false })}\n\n    });\n\n    return __jsx(Frame, null, __jsx(Page, null, __jsx(Layout, null, showToast, __jsx(Layout.Section, null, __jsx(DisplayText, {\n      size: \"extraLarge\"\n    }, \"Section 1 for \", item != undefined && item.title), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"The Header of your product pages is the most important section as it\\u2019s the first thing a visitor sees. You have less than 3 seconds to get their attention to read more. You have to make it count!\"), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"Every product solves a problem. You need to identify what problem the product solves. Then you need to identify what someone is feeling who has this problem. (Sad, annoyed, frustrated, jealous)\"), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"Then you need the visitor to realize you solve that problem they have.\"), __jsx(DisplayText, {\n      size: \"small\"\n    }, \"This is done in the headline. Asking if someone has that problem with a question is one of the best ways to hit the pain point someone has who needs your product.\"), showError), __jsx(Layout.Section, null, __jsx(Form, null, __jsx(Card, {\n      sectioned: true\n    }, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n      prefix: \"\",\n      value: getValue('headline'),\n      onChange: handleChange('headline'),\n      label: \"What is a question you could ask someone?\",\n      type: \"text\",\n      helpText: \"Examples: Have dandruff? Feeling tired or sluggish? Sick Of Zits? Got Back Pain?\"\n    })), __jsx(FormLayout.Group, null, __jsx(TextField, {\n      prefix: \"\",\n      value: metafield.outcome || '',\n      onChange: handleChange('outcome'),\n      label: \"In one sentence describe the outcome of using your product.\",\n      type: \"price\",\n      helpText: \"Examples:  \\u201CLook and feel your best in less than 24 hours!\\u201D \\u201CGrow the beard of your dreams.\\u201D \\u201CSay goodbye to pain without needing surgery.\\u201D\"\n    })), __jsx(FormLayout.Group, null, __jsx(TextField, {\n      prefix: \"\",\n      value: metafield.videoLink || '',\n      onChange: handleChange('videoLink'),\n      label: \"Do you have a YouTube video selling the product?\",\n      type: \"price\",\n      helpText: \"If not, leave blank.\"\n    })))), __jsx(PageActions, {\n      primaryAction: [{\n        content: 'Next',\n        onAction: function onAction() {\n          console.log('METAFIELDS', item.metafields);\n          console.log(item.metafields.edges[0]);\n          var productMetafield = {\n            \"id\": item.id,\n            \"metafields\": [{\n              'namespace': 'vizi',\n              \"key\": \"headline\",\n              \"value\": metafield.headline,\n              \"valueType\": \"STRING\"\n            }, {\n              'namespace': 'vizi',\n              \"key\": \"outcome\",\n              \"value\": metafield.outcome,\n              \"valueType\": \"STRING\"\n            }, {\n              'namespace': 'vizi',\n              \"key\": \"videolink\",\n              \"value\": metafield.videoLink,\n              \"valueType\": \"STRING\"\n            }]\n          };\n          {\n            handleSubmit({\n              variables: {\n                input: productMetafield\n              }\n            });\n          }\n          ;\n        }\n      }]\n    }))))));\n  }); // handleChange = (field) => {\n  //     return (value) => this.setState({ [field]: value });\n  // };\n  // itemToBeConsumed = () => {\n  //     const item = store.get('item');\n  //     const price = item.variants.edges[0].node.price;\n  //     const variantId = item.variants.edges[0].node.id;\n  //     const discounter = price * 0.1;\n  //     this.setState({ price, variantId });\n  //     return (price - discounter).toFixed(2);\n  // };\n}","map":{"version":3,"sources":["/Users/lucasvanskyhawk/code/shopify-app-v1/pages/edit-products.js"],"names":["React","useState","Banner","Card","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Toast","Heading","store","gql","Mutation","useQuery","Loading","array","nonExecutableDefinitionMessage","UPDATE_METAFIELD","EditProduct","metafield","setMetafield","item","get","handleChange","name","event","console","log","i","metafields","edges","length","node","key","value","getValue","undefined","find","e","handleSubmit","error","data","showError","message","showToast","productUpdate","title","outcome","videoLink","content","onAction","productMetafield","id","headline","variables","input"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n    Banner,\n    Card,\n    DisplayText,\n    Form,\n    FormLayout,\n    Frame,\n    Layout,\n    Page,\n    PageActions,\n    TextField,\n    Toast,\n    Heading\n} from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\n\n\nimport { Mutation, useQuery } from 'react-apollo';\nimport { Loading } from '@shopify/app-bridge/actions';\nimport { array } from 'prop-types';\nimport { nonExecutableDefinitionMessage } from 'graphql/validation/rules/ExecutableDefinitions';\n\n\n\n\nconst UPDATE_METAFIELD = gql`\nmutation($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        metafields(first: 100) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n    }\n  }`\n\n\n\nexport default function EditProduct() {\n\n    const [metafield, setMetafield] = useState([])\n\n    const item = store.get('item');\n    // let mf = [];\n    // if (item != undefined) {\n    //     for (let i = 0; i < item.metafields.edges.length; i++) {\n\n    //         mf[item.metafields.edges[i].node.key] = item.metafields.edges[i].node.value;\n\n    //         console.log('MF', mf);\n    //     }\n    //     setMetafield(mf);\n    // }\n\n    // console.log('MF->', mf);\n    // console.log('ITEM->', item);\n    // store.each(function (value, key) {\n    //     if (key == 'item') {\n    //         // setMetafield({ ...metafield, key })\n    //         const tmpvalue = value.metafields.edges.reduce((r, e) => {\n    //             r[e.node.key] = e.node.value\n    //             return r;\n    //         });\n    //         console.log('tmp', tmpvalue);\n    //         // setMetafield(metafield, tmp);\n    //     }\n    //     // console.log(key, '==', value)\n    // })\n    // const { loading, error, data } = useQuery(GET_METAFIELD, {\n    //     variables: { productid: `gid://shopify/Product/${item.id}` }\n    // })\n\n    // console.log(item != undefined && item.metafields)\n    // const reworkMetafields = item != undefined && item.metafields.edges.reduce((r, e) => {\n    //     let key = e.node.key;\n    //     // setMetafield({ ...metafield, [key]: e.node.value })\n    //     r[key] = e.node\n    //     return r;\n    // }, {});\n\n    // Array.isArray(reworkMetafields) && reworkMetafields.map(e => console.log('element', e));\n\n    const handleChange = name => event => {\n        // setMetafield({ ...metafield, [name]: event });\n        console.log(name, event);\n        for (let i = 0; i < item.metafields.edges.length; i++) {\n            if (item.metafields.edges[i].node.key == name) {\n                item.metafields.edges[i].node.value = event;\n            }\n        }\n        console.log('item', item);\n    }\n\n    const getValue = name => {\n        if (item != undefined) {\n            return item.metafields.edges.find(e => e.node.key == name).node.value;\n        }\n        return '';\n    }\n\n    // console.log('rework', reworkMetafields)\n\n    return (\n        <Mutation\n            mutation={UPDATE_METAFIELD}\n        >\n            {(handleSubmit, { error, data }) => {\n                console.log('DATA', data)\n                const showError = error && (\n                    <Banner status=\"critical\">{error.message}</Banner>\n                );\n                const showToast = data && data.productUpdate && (\n                    <Toast\n                        content=\"Sucessfully updated\"\n                    // onDismiss={() => this.setState({ showToast: false })}\n                    />\n                );\n\n                return (\n                    <Frame>\n                        <Page>\n                            <Layout>\n\n                                {showToast}\n\n                                <Layout.Section>\n                                    <DisplayText size='extraLarge'>Section 1 for {item != undefined && item.title}</DisplayText>\n                                    <DisplayText size=\"small\">The Header of your product pages is the most important section as it’s the first thing a visitor sees. You have less than 3 seconds to get their attention to read more. You have to make it count!</DisplayText>\n                                    <DisplayText size=\"small\">Every product solves a problem. You need to identify what problem the product solves. Then you need to identify what someone is feeling who has this problem. (Sad, annoyed, frustrated, jealous)</DisplayText>\n                                    <DisplayText size=\"small\">Then you need the visitor to realize you solve that problem they have.</DisplayText>\n                                    <DisplayText size=\"small\">This is done in the headline. Asking if someone has that problem with a question is one of the best ways to hit the pain point someone has who needs your product.</DisplayText>\n                                    {showError}\n                                </Layout.Section>\n                                <Layout.Section>\n\n\n                                    <Form>\n                                        <Card sectioned>\n                                            <FormLayout>\n\n                                                <FormLayout.Group>\n                                                    <TextField\n                                                        prefix=\"\"\n                                                        value={getValue('headline')}\n                                                        onChange={handleChange('headline')}\n\n                                                        label=\"What is a question you could ask someone?\"\n                                                        type=\"text\"\n                                                        helpText=\"Examples: Have dandruff? Feeling tired or sluggish? Sick Of Zits? Got Back Pain?\"\n\n                                                    />\n                                                </FormLayout.Group>\n                                                <FormLayout.Group>\n                                                    <TextField\n                                                        prefix=\"\"\n                                                        value={metafield.outcome || ''}\n                                                        onChange={handleChange('outcome')}\n                                                        label=\"In one sentence describe the outcome of using your product.\"\n                                                        type=\"price\"\n                                                        helpText=\"Examples:  “Look and feel your best in less than 24 hours!” “Grow the beard of your dreams.” “Say goodbye to pain without needing surgery.”\"\n\n                                                    />\n                                                </FormLayout.Group>\n\n                                                <FormLayout.Group>\n                                                    <TextField\n                                                        prefix=\"\"\n                                                        value={metafield.videoLink || ''}\n                                                        onChange={handleChange('videoLink')}\n\n                                                        label=\"Do you have a YouTube video selling the product?\"\n                                                        type=\"price\"\n                                                        helpText=\"If not, leave blank.\"\n                                                    />\n                                                </FormLayout.Group>\n\n                                            </FormLayout>\n                                        </Card>\n                                        <PageActions\n                                            primaryAction={[\n                                                {\n                                                    content: 'Next',\n                                                    onAction: () => {\n                                                        console.log('METAFIELDS', item.metafields)\n                                                        console.log(item.metafields.edges[0])\n                                                        const productMetafield = {\n\n                                                            \"id\": item.id,\n                                                            \"metafields\": [\n                                                                {\n                                                                    'namespace': 'vizi',\n                                                                    \"key\": \"headline\",\n                                                                    \"value\": metafield.headline,\n                                                                    \"valueType\": \"STRING\"\n                                                                },\n                                                                {\n                                                                    'namespace': 'vizi',\n                                                                    \"key\": \"outcome\",\n                                                                    \"value\": metafield.outcome,\n                                                                    \"valueType\": \"STRING\"\n                                                                },\n                                                                {\n                                                                    'namespace': 'vizi',\n                                                                    \"key\": \"videolink\",\n                                                                    \"value\": metafield.videoLink,\n                                                                    \"valueType\": \"STRING\"\n                                                                }\n                                                            ]\n\n                                                        };\n                                                        {\n                                                            handleSubmit({\n                                                                variables: { input: productMetafield },\n                                                            })\n                                                        };\n                                                    }\n                                                }\n                                            ]}\n                                        />\n                                    </Form>\n                                </Layout.Section>\n                            </Layout>\n                        </Page>\n                    </Frame>\n                );\n            }}\n        </Mutation>\n    );\n\n\n    // handleChange = (field) => {\n    //     return (value) => this.setState({ [field]: value });\n    // };\n\n    // itemToBeConsumed = () => {\n    //     const item = store.get('item');\n    //     const price = item.variants.edges[0].node.price;\n    //     const variantId = item.variants.edges[0].node.id;\n    //     const discounter = price * 0.1;\n    //     this.setState({ price, variantId });\n    //     return (price - discounter).toFixed(2);\n    // };\n}\n\n"]},"metadata":{},"sourceType":"module"}